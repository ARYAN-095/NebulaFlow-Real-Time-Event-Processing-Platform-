version: '3.8'

services:

  # ─── Infra ─────────────────────────────────────
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"

  timescaledb:
    image: timescale/timescaledb:latest-pg14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: iot
    volumes:
      - timescale-data:/var/lib/postgresql/data

  emqx:
    image: emqx/emqx:latest
    ports:
      - "1883:1883"
      - "18083:18083"

  # ─── Your Services ──────────────────────────────
  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    env_file: .env
    depends_on:
      - kafka
      - timescaledb
      - emqx
    ports:
      - "5000:5000"

  simulator:
    build:
      context: .
      dockerfile: simulator/Dockerfile
    env_file: .env
    depends_on:
      - api
      - emqx

  bridge:
    build:
      context: .
      dockerfile: bridge/Dockerfile
    env_file: .env
    depends_on:
      - emqx
      - kafka

  consumer:
    build:
      context: .
      dockerfile: consumer/Dockerfile
    env_file: .env
    depends_on:
      - kafka
      - timescaledb

  aggregator:
    build:
      context: .
      dockerfile: aggregator/Dockerfile
    env_file: .env
    depends_on:
      - kafka
      - timescaledb

  alerter:
    build:
      context: .
      dockerfile: aggregator/Dockerfile
    env_file: .env
    depends_on:
      - timescaledb
    command: node alert.js

  # ─── Observability ─────────────────────────────
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    depends_on:
      - api
      - aggregator
      - alerter

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: 'true'
      GF_SECURITY_ADMIN_PASSWORD: 'admin'
    volumes:
      - grafana-storage:/var/lib/grafana

volumes:
  timescale-data:
  grafana-storage:

networks:
  default:
    driver: bridge
